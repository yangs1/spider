<?php

/**
 * Created by PhpStorm.
 * User: yang
 * Date: 17-8-11
 * Time: 上午10:08
 */
namespace App\Core\Contracts;

use App\Core\Utility\Log;
use App\Core\Utility\Requests;
use App\Core\Utility\Selector;

abstract class SpiderAbstract{

    const AGENT_PC = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36";
    const AGENT_IOS = "Mozilla/5.0 (iPhone; CPU iPhone OS 9_3_3 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13G34 Safari/601.1";
    const AGENT_ANDROID = "Mozilla/5.0 (Linux; U; Android 6.0.1;zh_cn; Le X820 Build/FEXCNFN5801507014S) AppleWebKit/537.36 (KHTML, like Gecko)Version/4.0 Chrome/49.0.0.0 Mobile Safari/537.36 EUI Browser/5.8.015S";


    protected $mpid = 0;
    protected $works=[];
    protected $isMaster = true;
    protected $time_start;

    protected $collect_succ;
    protected $collect_fail;

    protected $configs = [];

    protected $taskid;
    protected $taskpid;
    /* 无Redis时 暂存变量*/
    protected $collect_urls =[];
    protected $collect_urls_num= 0;
    protected $collected_urls_num = 0;
    protected $collect_queue= [];
    protected $fields_num = 0;
    protected $depth_num = 0;
    protected $task_status = [];

    protected $isUseRedis = true;
   // public function handle();

    public $on_download_attached_page = null;
    public $on_extract_page =null;
    public $on_handle_img = null;
    public $on_extract_field = null;

    public $save_running_state = false;
    /**
     * 网页状态码回调
     *
     * @var mixed
     * @access public
     */
    public $on_status_code = null;

    public function __construct(){
        $this->mpid = posix_getpid();
        $this->configs = $this->init();
        $this->time_start = microtime(true);
        // 添加入口URL到队列
        foreach ( $this->configs['scan_urls'] as $url ) {
            // false 表示不允许重复
            $this->add_scan_url($url, null, false);
        }
    }

    public function init(){
        $configs = config('spider');
        $configs['name']        = isset($configs['name'])        ? $configs['name']        : 'phpspider';
        $configs['proxy']       = isset($configs['proxy'])       ? $configs['proxy']       : '';
        $configs['user_agent']  = isset($configs['user_agent'])  ? $configs['user_agent']  : self::AGENT_PC;
        $configs['user_agents'] = isset($configs['user_agents']) ? $configs['user_agents'] : null;
        $configs['client_ip']   = isset($configs['client_ip'])   ? $configs['client_ip']   : null;
        $configs['client_ips']  = isset($configs['client_ips'])  ? $configs['client_ips']  : null;
        $configs['interval']    = isset($configs['interval'])    ? $configs['interval']    : 100;
        $configs['timeout']     = isset($configs['timeout'])     ? $configs['timeout']     : 5;
        $configs['max_try']     = isset($configs['max_try'])     ? $configs['max_try']     : 3;
        $configs['max_depth']   = isset($configs['max_depth'])   ? $configs['max_depth']   : 0;
        $configs['max_fields']  = isset($configs['max_fields'])  ? $configs['max_fields']  : 0;
        $configs['export']      = isset($configs['export'])      ? $configs['export']      : array();

        // csv、sql、db
       /* self::$export_type  = isset($configs['export']['type'])  ? $configs['export']['type']  : '';
        self::$export_file  = isset($configs['export']['file'])  ? $configs['export']['file']  : '';
        self::$export_table = isset($configs['export']['table']) ? $configs['export']['table'] : '';
        self::$export_db_config = isset($configs['export']['config']) ? $configs['export']['config'] : $GLOBALS['config']['db'];*/

       $configs['export'] = true;
        // 是否设置了并发任务数, 并且大于1, 而且不是windows环境
        if (isset($configs['tasknum']) && $configs['tasknum'] > 1)
        {
            $this->tasknum = $configs['tasknum'];
        }

        // 是否设置了保留运行状态
        if (isset($configs['save_running_state']))
        {
            $this->save_running_state = $configs['save_running_state'];
        }

        // 是否分布式
        if (isset($configs['multiserver']))
        {
            $this->multiserver = $configs['multiserver'];
        }

        // 当前服务器ID
        if (isset($configs['serverid']))
        {
            $this->serverid = $configs['serverid'];
        }
        return $configs;
    }

    public function add_scan_url($url, $options = array(), $allowed_repeat = true){
        // 投递状态
        $status = false;

        $link = $options;
        $link['url'] = $url;
        $link['url_type'] = 'scan_page';
        $link = $this->link_uncompress($link);

        if ($this->is_list_page($url))
        {
            $link['url_type'] = 'list_page';
            $status = $this->queue_lpush($link, $allowed_repeat);
        }
        elseif ($this->is_content_page($url))
        {
            $link['url_type'] = 'content_page';
            $status = $this->queue_lpush($link, $allowed_repeat);
        }
        else
        {
            $status = $this->queue_lpush($link, $allowed_repeat);
        }

        if ($status)
        {
            if ($link['url_type'] == 'scan_page')
            {
                Log::debug("Find scan page: {$url}");
            }
            elseif ($link['url_type'] == 'list_page')
            {
                Log::debug("Find list page: {$url}");
            }
            elseif ($link['url_type'] == 'content_page')
            {
                Log::debug("Find content page: {$url}");
            }
        }

        return $status;
    }
    /**
     * 连接对象压缩
     *
     * @return array
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-11-05 18:58
     */
    public function link_compress($link)
    {
        if (empty($link['url_type']))
        {
            unset($link['url_type']);
        }

        if (empty($link['method']) || strtolower($link['method']) == 'get')
        {
            unset($link['method']);
        }

        if (empty($link['headers']))
        {
            unset($link['headers']);
        }

        if (empty($link['params']))
        {
            unset($link['params']);
        }

        if (empty($link['context_data']))
        {
            unset($link['context_data']);
        }

        if (empty($link['proxy']))
        {
            unset($link['proxy']);
        }

        if (empty($link['try_num']))
        {
            unset($link['try_num']);
        }

        if (empty($link['max_try']))
        {
            unset($link['max_try']);
        }

        if (empty($link['depth']))
        {
            unset($link['depth']);
        }
        //$json = json_encode($link);
        //$json = gzdeflate($json);
        return $link;
    }
    /**
     * 连接对象解压缩
     *
     * @param mixed $link
     * @return array
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-11-05 18:58
     */
    public function link_uncompress($link)
    {
        $link = array(
            'url'          => isset($link['url'])          ? $link['url']          : '',
            'url_type'     => isset($link['url_type'])     ? $link['url_type']     : '',
            'method'       => isset($link['method'])       ? $link['method']       : 'get',
            'headers'      => isset($link['headers'])      ? $link['headers']      : array(),
            'params'       => isset($link['params'])       ? $link['params']       : array(),
            'context_data' => isset($link['context_data']) ? $link['context_data'] : '',
            'proxy'        => isset($link['proxy'])        ? $link['proxy']        : $this->configs['proxy'],
            'try_num'      => isset($link['try_num'])      ? $link['try_num']      : 0,
            'max_try'      => isset($link['max_try'])      ? $link['max_try']      : $this->configs['max_try'],
            'depth'        => isset($link['depth'])        ? $link['depth']        : 0,
        );

        return $link;
    }

    /**
     * 是否列表页面
     *
     * @param mixed $url
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-10-12 19:06
     */
    public function is_list_page($url)
    {
        $result = false;
        if (!empty($this->configs['list_url_regexes']))
        {
            foreach ($this->configs['list_url_regexes'] as $regex)
            {
                if (preg_match("#{$regex}#i", $url))
                {
                    $result = true;
                    break;
                }
            }
        }
        return $result;
    }
    /**
     * 是否内容页面
     *
     * @param mixed $url
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-10-12 19:06
     */
    public function is_content_page($url)
    {
        $result = false;
        if (!empty($this->configs['content_url_regexes']))
        {
            foreach ($this->configs['content_url_regexes'] as $regex) {
                if (preg_match("#{$regex}#i", $url)) {
                    $result = true;
                    break;
                }
            }
        }
        return $result;
    }
    /**
     * 从队列左边插入
     *
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function queue_lpush($link = array(), $allowed_repeat = false){
        if (empty($link) || empty($link['url'])) {
            return false;
        }
        $url = $link['url'];
        $link = $this->link_compress($link);

        $status = false;
        if ($this->isUseRedis)
        {
            $key = "collect_urls-".md5($url);
            $lock = "lock-".$key;
            // 加锁: 一个进程一个进程轮流处理
            if ( redis()->lock($lock))
            {

                $exists = redis()->exists($key);
                // 不存在或者当然URL可重复入
                if (!$exists || $allowed_repeat)
                {
                    // 待爬取网页记录数加一
                    redis()->incr("collect_urls_num");
                    // 先标记为待爬取网页
                    redis()->set($key, time());
                    // 入队列
                    $link = json_encode($link);
                    redis()->lpush("collect_queue", $link);
                    $status = true;
                }
                // 解锁
                redis()->unLock($lock);
            }
        }
        else
        {

            $key = md5($url);
            if (!array_key_exists($key, $this->collect_urls))
            {
                $this->collect_urls_num++;
                $this->collect_urls[$key] = time();
                array_push($this->collect_queue, $link);
                $status = true;
            }
        }
        return $status;
    }

    /**
     * 从队列右边插入
     *
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function queue_rpush($link = array(), $allowed_repeat = false)
    {
        if (empty($link) || empty($link['url'])) {
            return false;
        }

        $url = $link['url'];
        $status = false;
        if ($this->isUseRedis) {
            $key = "collect_urls-".md5($url);
            $lock = "lock-".$key;
            // 加锁: 一个进程一个进程轮流处理
            if (redis()->lock($lock))
            {
                $exists = redis()->exists($key);
                // 不存在或者当然URL可重复入
                if (!$exists || $allowed_repeat)
                {
                    // 待爬取网页记录数加一
                    redis()->incr("collect_urls_num");
                    // 先标记为待爬取网页
                    redis()->set($key, time());
                    // 入队列
                    $link = json_encode($link);
                    redis()->rpush("collect_queue", $link);
                    $status = true;
                }
                // 解锁
                redis()->unLock($lock);
            }
        }
        else {
            $key = md5($url);
            if (!array_key_exists($key, $this->collect_urls)) {
                $this->collect_urls_num++;
                $this->collect_urls[$key] = time();
                array_unshift($this->collect_queue, $link);
                $status = true;
            }
        }
        return $status;
    }
    /**
     * 从队列右边取出
     *
     * @return array
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function queue_rpop()
    {
        if ($this->isUseRedis)
        {
            $link = redis()->rpop("collect_queue");
            $link = json_decode($link, true);
        }
        else
        {
            $link = array_shift($this->collect_queue);
        }
        return $link;
    }
    /**
     * 队列长度
     * @return int|mixed
     */
    public function queue_lsize()
    {
        if ($this->isUseRedis) {
            $lsize = redis()->lsize("collect_queue");
        }
        else {
            $lsize = count($this->collect_queue);
        }
        return $lsize;
    }


    /**
     * 获取等待爬取页面数量
     * @return int
     */
    public function get_collect_url_num()
    {
        if ($this->isUseRedis)
        {
            $count = redis()->get("collect_urls_num");
        }
        else
        {
            $count = $this->collect_urls_num;
        }
        return $count;
    }

    /**
     * 获取已经爬取页面数量
     *
     * @return int
     */
    public function get_collected_url_num()
    {
        if ($this->isUseRedis) {
            $count = redis()->get("collected_urls_num");
        }
        else {
            $count = $this->collected_urls_num;
        }
        return $count;
    }
    /**
     * 已采集页面数量加一
     *
     * @return void
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function incr_collected_url_num()
    {
        if ($this->isUseRedis) {
            redis()->incr("collected_urls_num");
        }
        else {
            $this->collected_urls_num++;
        }
    }


    /**
     * 下载网页, 得到网页内容
     *
     * @param mixed $url
     * @param mixed $link
     * @return mixed
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function request_url($url, $link = array()){
        $time_start = microtime(true);

        //$url = "http://www.qiushibaike.com/article/117568316";

        // 设置了编码就不要让requests去判断了
        if (isset($this->configs['input_encoding']))
        {
            Requests::$input_encoding = $this->configs['input_encoding'];
        }
        // 得到的编码如果不是utf-8的要转成utf-8, 因为xpath只支持utf-8
        Requests::$output_encoding = 'utf-8';
        Requests::set_timeout($this->configs['timeout']);
        Requests::set_useragent($this->configs['user_agent']);
        if ($this->configs['user_agents'])
        {
            Requests::set_useragents($this->configs['user_agents']);
        }
        if ($this->configs['client_ip'])
        {
            Requests::set_client_ip($this->configs['client_ip']);
        }
        if ($this->configs['client_ips'])
        {
            Requests::set_client_ips($this->configs['client_ips']);
        }

        // 是否设置了代理
        if (!empty($link['proxy']))
        {
            Requests::set_proxies(array('http'=>$link['proxy'], 'https'=>$link['proxy']));
            // 自动切换IP
            Requests::set_header('Proxy-Switch-Ip', 'yes');
        }

        // 如何设置了 HTTP Headers
        if (!empty($link['headers'])) {
            foreach ($link['headers'] as $k=>$v)
            {
                Requests::set_header($k, $v);
            }
        }

        $method = empty($link['method']) ? 'get' : strtolower($link['method']);
        $params = empty($link['params']) ? array() : $link['params'];
        $html = Requests::$method($url, $params);
        // 此url附加的数据不为空, 比如内容页需要列表页一些数据, 拼接到后面去
        if ($html && !empty($link['context_data']))
        {
            $html .= $link['context_data'];
        }

        $http_code = Requests::$status_code;

        if ($this->on_status_code)
        {
            $return = call_user_func($this->on_status_code, $http_code, $url, $html, $this);
            if (isset($return))
            {
                $html = $return;
            }
            if (!$html)
            {
                return false;
            }
        }

        if ($http_code != 200) {
            // 如果是301、302跳转, 抓取跳转后的网页内容
            if ($http_code == 301 || $http_code == 302) {
                $info = Requests::$info;
                if (isset($info['redirect_url'])) {
                    $url = $info['redirect_url'];
                    Requests::$input_encoding = null;
                    $html = $this->request_url($url, $link);
                    if ($html && !empty($link['context_data']))
                    {
                        $html .= $link['context_data'];
                    }
                }
                else {
                    return false;
                }
            }
            else {
                if ($http_code == 407) {
                    // 扔到队列头部去, 继续采集
                    $this->queue_rpush($link);
                    Log::error("Failed to download page {$url}");
                    $this->collect_fail++;
                }
                elseif (in_array($http_code, array('0','502','503','429'))) {
                    // 采集次数加一
                    $link['try_num']++;
                    // 抓取次数 小于 允许抓取失败次数
                    if ( $link['try_num'] <= $link['max_try'] )
                    {
                        // 扔到队列头部去, 继续采集
                        $this->queue_rpush($link);
                    }
                    Log::error("Failed to download page {$url}, retry({$link['try_num']})");
                }
                else
                {
                    Log::error("Failed to download page {$url}");
                    $this->collect_fail++;
                }
                Log::error("HTTP CODE: {$http_code}");
                return false;
            }
        }

        // 爬取页面耗时时间
        $time_run = round(microtime(true) - $time_start, 3);
        Log::debug("Success download page {$url} in {$time_run} s");
        $this->collect_succ++;

        return $html;
    }



    /**
     * 分析提取HTML页面中的URL
     *
     * @param mixed $html           HTML内容
     * @param mixed $collect_url    抓取的URL, 用来拼凑完整页面的URL
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function get_urls($html, $collect_url, $depth = 0)
    {
        //--------------------------------------------------------------------------------
        // 正则匹配出页面中的URL
        //--------------------------------------------------------------------------------
        $urls = Selector::select($html, '//a/@href');

        if (empty($urls))
        {
            return false;
        }

        // 如果页面上只有一个url，要把他转为数组，否则下面会报警告
        if (!is_array($urls))
        {
            $urls = array($urls);
        }

        foreach ($urls as $key=>$url)
        {
            $urls[$key] = str_replace(array("\"", "'",'&amp;'), array("",'','&'), $url);
        }

        //--------------------------------------------------------------------------------
        // 过滤和拼凑URL
        //--------------------------------------------------------------------------------
        // 去除重复的RUL
        $urls = array_unique($urls);
        foreach ($urls as $k=>$url)
        {
            $url = trim($url);
            if (empty($url))
            {
                continue;
            }

            $val = $this->fill_url($url, $collect_url);
            if ($val)
            {
                $urls[$k] = $val;
            }
            else
            {
                unset($urls[$k]);
            }
        }

        if (empty($urls))
        {
            return false;
        }

        //--------------------------------------------------------------------------------
        // 把抓取到的URL放入队列
        //--------------------------------------------------------------------------------
        foreach ($urls as $url)
        {
            if ($this->on_fetch_url)
            {
                $return = call_user_func($this->on_fetch_url, $url, $this);
                $url = isset($return) ? $return : $url;
                unset($return);

                // 如果 on_fetch_url 返回 false，此URL不入队列
                if (!$url)
                {
                    continue;
                }
            }

            // 把当前页当做找到的url的Referer页
            $options = array(
                'headers' => array(
                    'Referer' => $collect_url,
                )
            );
            $this->add_url($url, $options, $depth);
        }
    }

    /**
     * 一般在 on_scan_page 和 on_list_page 回调函数中调用, 用来往待爬队列中添加url
     * 两个进程同时调用这个方法, 传递相同url的时候, 就会出现url重复进入队列
     *
     * @param mixed $url
     * @param mixed $options
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function add_url($url, $options = array(), $depth = 0)
    {
        // 投递状态
        $status = false;

        $link = $options;
        $link['url'] = $url;
        $link['depth'] = $depth;
        $link = $this->link_uncompress($link);

        if ($this->is_list_page($url))
        {
            $link['url_type'] = 'list_page';
            $status = $this->queue_lpush($link);
        }

        if ($this->is_content_page($url))
        {
            $link['url_type'] = 'content_page';
            $status = $this->queue_lpush($link);
        }

        if ($status)
        {
            if ($link['url_type'] == 'scan_page')
            {
                Log::debug("Find scan page: {$url}");
            }
            elseif ($link['url_type'] == 'list_page')
            {
                log::debug("Find list page: {$url}");
            }
            elseif ($link['url_type'] == 'content_page')
            {
                log::debug("Find content page: {$url}");
            }
        }

        return $status;
    }


    /**
     * 分析提取HTML页面中的字段
     *
     * @param mixed $html
     * @return void
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function get_html_fields($html, $url, $page)
    {
        $fields = $this->get_fields($this->configs['fields'], $html, $url, $page);

        if (!empty($fields))
        {
            if ($this->on_extract_page)
            {
                $return = call_user_func($this->on_extract_page, $page, $fields);
                if (!isset($return))
                {
                    Log::warn("on_extract_page return value can't be empty");
                }
                elseif (!is_array($return))
                {
                    Log::warn("on_extract_page return value must be an array");
                }
                else
                {
                    $fields = $return;
                }
            }

            if (isset($fields) && is_array($fields))
            {
                $fields_num = $this->incr_fields_num();
                if ($this->configs['max_fields'] != 0 && $fields_num > $this->configs['max_fields'])
                {
                    exit(0);
                }

                if (version_compare(PHP_VERSION,'5.4.0','<'))
                {
                    $fields_str = json_encode($fields);
                    $fields_str = preg_replace_callback( "#\\\u([0-9a-f]{4})#i", function($matchs) {
                        return iconv('UCS-2BE', 'UTF-8', pack('H4', $matchs[1]));
                    }, $fields_str );
                }
                else
                {
                    $fields_str = json_encode($fields, JSON_UNESCAPED_UNICODE);
                }

              /*  if (util::is_win())
                {
                    $fields_str = mb_convert_encoding($fields_str, 'gb2312', 'utf-8');
                }*/
                Log::info("Result[{$fields_num}]: ".$fields_str);

                // 如果设置了导出选项
                if (!empty($this->configs['export']))
                {
                   /* $this->export_type = isset($this->configs['export']['type']) ? $this->configs['export']['type'] : '';
                    if ($this->export_type == 'csv')
                    {
                        util::put_file(self::$export_file, util::format_csv($fields)."\n", FILE_APPEND);
                    }
                    elseif (self::$export_type == 'sql')
                    {
                        $sql = db::insert(self::$export_table, $fields, true);
                        util::put_file(self::$export_file, $sql.";\n", FILE_APPEND);
                    }
                    elseif (self::$export_type == 'db')
                    {
                        db::insert(self::$export_table, $fields);
                    }*/
                   var_dump($fields);
                    sleep(10);
                }
            }
        }
    }
    /**
     * 根据配置提取HTML代码块中的字段
     *
     * @param mixed $confs
     * @param mixed $html
     * @param mixed $page
     * @return array
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function get_fields($confs, $html, $url, $page)
    {
        $fields = array();
        foreach ($confs as $conf)
        {
            // 当前field抽取到的内容是否是有多项
            $repeated = isset($conf['repeated']) && $conf['repeated'] ? true : false;
            // 当前field抽取到的内容是否必须有值
            $required = isset($conf['required']) && $conf['required'] ? true : false;

            if (empty($conf['name']))
            {
                Log::error("The field name is null, please check your \"fields\" and add the name of the field\n");
                exit;
            }

            $values = array();
            // 如果定义抽取规则
            if (!empty($conf['selector']))
            {
                // 如果这个field是上一个field的附带连接
                if (isset($conf['source_type']) && $conf['source_type']=='attached_url')
                {
                    // 取出上个field的内容作为连接, 内容分页是不进队列直接下载网页的
                    if (!empty($fields[$conf['attached_url']]))
                    {
                        $collect_url = $this->fill_url($fields[$conf['attached_url']], $url);
                        //log::debug("Find attached content page: {$collect_url}");
                        $link['url'] = $collect_url;
                        $link = $this->link_uncompress($link);
                        Requests::$input_encoding = null;
                        $html = $this->request_url($collect_url, $link);
                        // 在一个attached_url对应的网页下载完成之后调用. 主要用来对下载的网页进行处理.
                        if ($this->on_download_attached_page)
                        {
                            $return = call_user_func($this->on_download_attached_page, $html, $this);
                            if (isset($return))
                            {
                                $html = $return;
                            }
                        }

                        // 请求获取完分页数据后把连接删除了
                        unset($fields[$conf['attached_url']]);
                    }
                }

                // 没有设置抽取规则的类型 或者 设置为 xpath
                if (!isset($conf['selector_type']) || $conf['selector_type']=='xpath')
                {
                    $values = $this->get_fields_xpath($html, $conf['selector'], $conf['name']);
                }
                elseif ($conf['selector_type']=='css')
                {
                    $values = $this->get_fields_css($html, $conf['selector'], $conf['name']);
                }
                elseif ($conf['selector_type']=='regex')
                {
                    $values = $this->get_fields_regex($html, $conf['selector'], $conf['name']);
                }

                // field不为空而且存在子配置
                if (!empty($values) && !empty($conf['children']))
                {
                    $child_values = array();
                    // 父项抽取到的html作为子项的提取内容
                    foreach ($values as $child_html)
                    {
                        // 递归调用本方法, 所以多少子项目都支持
                        $child_value = $this->get_fields($conf['children'], $child_html, $url, $page);
                        if (!empty($child_value))
                        {
                            $child_values[] = $child_value;
                        }
                    }
                    // 有子项就存子项的数组, 没有就存HTML代码块
                    if (!empty($child_values))
                    {
                        $values = $child_values;
                    }
                }
            }

            if (empty($values))
            {
                // 如果值为空而且值设置为必须项, 跳出foreach循环
                if ($required)
                {
                    // 清空整个 fields
                    $fields = array();
                    break;
                }
                // 避免内容分页时attached_url拼接时候string + array了
                $fields[$conf['name']] = '';
                //$fields[$conf['name']] = array();
            }
            else
            {
                if (is_array($values))
                {
                    if ($repeated)
                    {
                        $fields[$conf['name']] = $values;
                    }
                    else
                    {
                        $fields[$conf['name']] = $values[0];
                    }
                }
                else
                {
                    $fields[$conf['name']] = $values;
                }
                // 不重复抽取则只取第一个元素
                //$fields[$conf['name']] = $repeated ? $values : $values[0];
            }
        }

        if (!empty($fields))
        {
            foreach ($fields as $fieldname => $data)
            {
                $pattern = "/<img.*src=[\"']{0,1}(.*)[\"']{0,1}[> \r\n\t]{1,}/isU";
                /*$pattern = "/<img.*?src=[\'|\"](.*?(?:[\.gif|\.jpg|\.jpeg|\.png]))[\'|\"].*?[\/]?>/i"; */
                // 在抽取到field内容之后调用, 对其中包含的img标签进行回调处理
                if ($this->on_handle_img && preg_match($pattern, $data))
                {
                    $return = call_user_func($this->on_handle_img, $fieldname, $data);
                    if (!isset($return))
                    {
                        Log::warn("on_handle_img return value can't be empty\n");
                    }
                    else
                    {
                        // 有数据才会执行 on_handle_img 方法, 所以这里不要被替换没了
                        $data = $return;
                    }
                }

                // 当一个field的内容被抽取到后进行的回调, 在此回调中可以对网页中抽取的内容作进一步处理
                if ($this->on_extract_field)
                {
                    $return = call_user_func($this->on_extract_field, $fieldname, $data, $page);
                    if (!isset($return))
                    {
                        Log::warn("on_extract_field return value can't be empty\n");
                    }
                    else
                    {
                        // 有数据才会执行 on_extract_field 方法, 所以这里不要被替换没了
                        $fields[$fieldname] = $return;
                    }
                }
            }
        }

        return $fields;
    }

    /**
     * 采用xpath分析提取字段
     *
     * @param mixed $html
     * @param mixed $selector
     * @return mixed
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function get_fields_xpath($html, $selector, $fieldname)
    {
        $result = Selector::select($html, $selector);
        if (Selector::$error)
        {
            Log::error("Field(\"{$fieldname}\") ".Selector::$error."\n");
        }
        return $result;
    }
    /**
     * 采用CSS选择器提取字段
     *
     * @param mixed $html
     * @param mixed $selector
     * @param mixed $fieldname
     * @return mixed
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function get_fields_css($html, $selector, $fieldname)
    {
        $result = Selector::select($html, $selector, 'css');
        if (Selector::$error)
        {
            Log::error("Field(\"{$fieldname}\") ".Selector::$error."\n");
        }
        return $result;
    }
    /**
     * 采用正则分析提取字段
     *
     * @param mixed $html
     * @param mixed $selector
     * @return mixed
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-18 10:17
     */
    public function get_fields_regex($html, $selector, $fieldname)
    {
        $result = Selector::select($html, $selector, 'regex');
        if (Selector::$error)
        {
            Log::error("Field(\"{$fieldname}\") ".Selector::$error."\n");
        }
        return $result;
    }

    /**
     * 提取到的field数目加一
     *
     * @return int
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function incr_fields_num()
    {
        if ($this->isUseRedis)
        {
            $fields_num = redis()->incr("fields_num");
        }
        else
        {
            $this->fields_num++;
            $fields_num = $this->fields_num;
        }
        return $fields_num;
    }

    /**
     * 采集深度加一
     *
     * @return void
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function incr_depth_num($depth)
    {
        if ($this->isUseRedis)
        {
            $lock = "lock-depth_num";
            // 锁2秒
            if (redis()->lock($lock, time(), 2))
            {
                if (redis()->get("depth_num") < $depth)
                {
                    redis()->set("depth_num", $depth);
                }

                redis()->unLock($lock);
            }
        }
        else
        {
            if ($this->depth_num < $depth)
            {
                $this->depth_num = $depth;
            }
        }
    }

    /**
     * 设置任务状态, 主进程和子进程每成功采集一个页面后调用
     *
     * @return void
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-10-30 23:56
     */
    public function set_task_status()
    {
        // 每采集成功一个页面, 生成当前进程状态到文件, 供主进程使用
        $mem = round(memory_get_usage(true)/(1024*1024),2);
        $use_time = microtime(true) - $this->time_start;
        $speed = round(($this->collect_succ + $this->collect_fail) / $use_time, 2);
        $status = array(
            'id' => $this->taskid,
            'pid' => $this->taskpid,
            'mem' => $mem,
            'collect_succ' => $this->collect_succ,
            'collect_fail' => $this->collect_fail,
            'speed' => $speed,
        );
        $task_status = json_encode($status);

        if ($this->isUseRedis) {
            $key = "server-"." uniqid server "."-task_status-".$this->taskid;
            redis()->set($key, $task_status);
        }
        else {
            $this->task_status = array($task_status);
        }
    }
    /**
     * 获得完整的连接地址
     *
     * @param mixed $url            要检查的URL
     * @param mixed $collect_url    从那个URL页面得到上面的URL
     * @return bool
     * @author seatle <seatle@foxmail.com>
     * @created time :2016-09-23 17:13
     */
    public function fill_url($url, $collect_url){
        $url = trim($url);
        $collect_url = trim($collect_url);

        // 排除JavaScript的连接
        //if (strpos($url, "javascript:") !== false)
        if( preg_match("@^(javascript:|#|'|\")@i", $url) || $url == '')
        {
            return false;
        }
        // 排除没有被解析成功的语言标签
        if(substr($url, 0, 3) == '<%=')
        {
            return false;
        }

        $parse_url = @parse_url($collect_url);
        if (empty($parse_url['scheme']) || empty($parse_url['host']))
        {
            return false;
        }
        // 过滤mailto、tel、sms、wechat、sinaweibo、weixin等协议
        if (!in_array($parse_url['scheme'], array("http", "https")))
        {
            return false;
        }
        $scheme = $parse_url['scheme'];
        $domain = $parse_url['host'];
        $path = empty($parse_url['path']) ? '' : $parse_url['path'];
        $base_url_path = $domain.$path;
        $base_url_path = preg_replace("/\/([^\/]*)\.(.*)$/","/",$base_url_path);
        $base_url_path = preg_replace("/\/$/",'',$base_url_path);

        $i = $path_step = 0;
        $dstr = $pstr = '';
        $pos = strpos($url,'#');
        if($pos > 0)
        {
            // 去掉#和后面的字符串
            $url = substr($url, 0, $pos);
        }

        // 京东变态的都是 //www.jd.com/111.html
        if(substr($url, 0, 2) == '//')
        {
            $url = str_replace("//", "", $url);
        }
        // /1234.html
        elseif($url[0] == '/')
        {
            $url = $domain.$url;
        }
        // ./1234.html、../1234.html 这种类型的
        elseif($url[0] == '.')
        {
            if(!isset($url[2]))
            {
                return false;
            }
            else
            {
                $urls = explode('/',$url);
                foreach($urls as $u)
                {
                    if( $u == '..' )
                    {
                        $path_step++;
                    }
                    // 遇到 ., 不知道为什么不直接写$u == '.', 貌似一样的
                    else if( $i < count($urls)-1 )
                    {
                        $dstr .= $urls[$i].'/';
                    }
                    else
                    {
                        $dstr .= $urls[$i];
                    }
                    $i++;
                }
                $urls = explode('/',$base_url_path);
                if(count($urls) <= $path_step)
                {
                    return false;
                }
                else
                {
                    $pstr = '';
                    for($i=0;$i<count($urls)-$path_step;$i++){ $pstr .= $urls[$i].'/'; }
                    $url = $pstr.$dstr;
                }
            }
        }
        else
        {
            if( strtolower(substr($url, 0, 7))=='http://' )
            {
                $url = preg_replace('#^http://#i','',$url);
                $scheme = "http";
            }
            else if( strtolower(substr($url, 0, 8))=='https://' )
            {
                $url = preg_replace('#^https://#i','',$url);
                $scheme = "https";
            }
            else
            {
                $url = $base_url_path.'/'.$url;
            }
        }
        // 两个 / 或以上的替换成一个 /
        $url = preg_replace('@/{1,}@i', '/', $url);
        $url = $scheme.'://'.$url;
        //echo $url;exit("\n");

        $parse_url = @parse_url($url);
        $domain = empty($parse_url['host']) ? $domain : $parse_url['host'];
        // 如果host不为空, 判断是不是要爬取的域名
        if (!empty($parse_url['host']))
        {
            //排除非域名下的url以提高爬取速度
            if (!in_array($parse_url['host'], $this->configs['domains']))
            {
                return false;
            }
        }

        return $url;
    }
    abstract function boot();
}